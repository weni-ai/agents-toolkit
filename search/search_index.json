{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Weni Agents Toolkit","text":"<p>A Python library for creating and managing agent tools for the Weni platform. Build powerful conversational agents with type-safe components and a robust tool system.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Type-safe Tools: Build reliable tools with type checking and validation</li> <li>\ud83d\udee1\ufe0f Immutable Context: Secure handling of credentials and configuration</li> <li>\ud83e\udde9 Modular Architecture: Easily extend and customize tools</li> <li>\ud83d\udcdd Rich Context: Comprehensive data structures for AI understanding</li> <li>\u2728 Built-in Validation: Automatic validation of responses and data</li> <li>\ud83d\udd0c Response System: Simple and intuitive context creation</li> </ul>"},{"location":"#installation","title":"Installation","text":"pipPoetry <pre><code>pip install weni-agents-toolkit\n</code></pre> <pre><code>poetry add weni-agents-toolkit\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\n\nclass GreetingTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Get user information from context\n        name = context.parameters.get(\"name\", \"Guest\")\n        language = context.parameters.get(\"language\", \"en\")\n\n        # Return context for the AI to generate an appropriate greeting\n        return TextResponse(data={\n            \"user\": {\n                \"name\": name,\n                \"language\": language,\n            },\n            \"time_context\": {\n                \"time_of_day\": self._get_time_of_day(),\n                \"user_timezone\": \"UTC-3\",\n                \"is_business_hours\": True\n            },\n            \"available_actions\": [\n                \"start_conversation\",\n                \"show_help\",\n                \"view_profile\"\n            ]\n        })\n</code></pre>"},{"location":"#project-status","title":"Project Status","text":""},{"location":"getting-started/core-concepts/","title":"Core Concepts","text":""},{"location":"getting-started/core-concepts/#tools","title":"Tools","text":"<p>Tools are the fundamental building blocks of the Weni Agents Toolkit. Each tool is a self-contained unit of functionality that can:</p> <ul> <li>Process user input</li> <li>Execute business logic</li> <li>Generate appropriate responses with context for the AI agent</li> </ul> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\n\nclass WeatherTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Tool implementation that returns context for the AI agent\n        city = context.parameters.get(\"city\", \"\")\n        weather_data = self._fetch_weather(city)\n\n        return TextResponse(data={\n            \"city\": city,\n            \"temperature\": weather_data[\"temp\"],\n            \"conditions\": weather_data[\"conditions\"],\n            \"forecast\": weather_data[\"next_24h\"]\n        })\n</code></pre>"},{"location":"getting-started/core-concepts/#context-system","title":"Context System","text":"<p>The Context system provides a secure, immutable container for passing data to tools:</p> <pre><code>context = Context(\n    credentials={\"api_key\": \"secret123\"},     # Sensitive data\n    parameters={\"city\": \"New York\"},          # Tool parameters\n    globals={\"api_url\": \"https://api.example.com\"}  # Global configuration\n)\n</code></pre>"},{"location":"getting-started/core-concepts/#responses","title":"Responses","text":"<p>Responses encapsulate the context data that will be used by the AI agent to generate appropriate responses:</p> <pre><code>from weni.responses import QuickReplyResponse\n\n# The data contains context about a user's order confirmation\nresponse = QuickReplyResponse(\n    data={\n        \"order_id\": \"12345\",\n        \"items\": [\n            {\"name\": \"Product A\", \"quantity\": 2, \"price\": 29.99},\n            {\"name\": \"Product B\", \"quantity\": 1, \"price\": 49.99}\n        ],\n        \"total\": 109.97,\n        \"shipping_method\": \"express\",\n        \"estimated_delivery\": \"2024-02-15\"\n    }\n)\n</code></pre>"},{"location":"getting-started/core-concepts/#key-principles","title":"Key Principles","text":"<ol> <li>Tools are responsible for:</li> <li>Processing inputs</li> <li>Executing business logic</li> <li>Gathering relevant context</li> <li> <p>Returning responses with context data</p> </li> <li> <p>Context provides:</p> </li> <li>Secure credential storage</li> <li>Tool-specific parameters</li> <li>Global configuration</li> <li> <p>Immutable data access</p> </li> <li> <p>Responses contain:</p> </li> <li>Rich context data for AI processing</li> <li>Structured information</li> <li>Relevant metadata</li> <li>Business logic results</li> </ol> <p>Response Data</p> <p>Remember that responses don't contain the final message text. Instead, they provide the context and data that the AI agent will use to generate appropriate responses for users.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or later</li> <li>pip or Poetry for package management</li> </ul>"},{"location":"getting-started/installation/#installing-with-pip","title":"Installing with pip","text":"<pre><code>pip install weni-agents-toolkit\n</code></pre>"},{"location":"getting-started/installation/#installing-with-poetry","title":"Installing with Poetry","text":"<pre><code>poetry add weni-agents-toolkit\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":""},{"location":"getting-started/quickstart/#creating-your-first-tool","title":"Creating Your First Tool","text":"<p>Let's create a simple greeting tool that provides user context:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\n\nclass GreetingTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        name = context.parameters.get(\"name\", \"Guest\")\n        time_of_day = self._get_time_of_day()\n\n        return TextResponse(data={\n            \"user_name\": name,\n            \"time_of_day\": time_of_day,\n            \"is_returning_user\": name != \"Guest\",\n            \"available_actions\": [\"start_conversation\", \"show_menu\", \"get_help\"]\n        })\n</code></pre>"},{"location":"getting-started/quickstart/#using-quick-replies","title":"Using Quick Replies","text":"<p>Here's how to create a tool that provides context for decision-making:</p> <pre><code>from weni.responses import QuickReplyResponse\n\nclass ConfirmationTool(Tool):\n    def execute(self, context: Context) -&gt; QuickReplyResponse:\n        order_id = context.parameters.get(\"order_id\")\n        order_details = self._get_order_details(order_id)\n\n        return QuickReplyResponse(\n            data={\n                \"order_id\": order_id,\n                \"order_status\": order_details[\"status\"],\n                \"total_amount\": order_details[\"total\"],\n                \"items_count\": len(order_details[\"items\"]),\n                \"requires_confirmation\": True,\n                \"confirmation_deadline\": \"2024-02-15T18:00:00Z\",\n                \"user_preferences\": {\n                    \"preferred_payment\": \"credit_card\",\n                    \"previous_responses\": [\"confirmed\", \"on_time\"]\n                }\n            }\n        )\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-context","title":"Working with Context","text":"<p>The Context object provides access to: - Credentials (API keys, tokens) - Parameters (tool-specific inputs) - Globals (project-wide settings)</p> <pre><code>class WeatherTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Access API key from credentials\n        api_key = context.credentials.get(\"weather_api_key\")\n\n        # Get location from parameters\n        city = context.parameters.get(\"city\")\n\n        # Get API URL from globals\n        api_url = context.globals.get(\"weather_api_url\")\n\n        # Fetch weather data\n        weather_data = self._fetch_weather_data(api_url, city, api_key)\n\n        # Return context for the AI to generate a weather response\n        return TextResponse(data={\n            \"location\": {\n                \"city\": city,\n                \"country\": weather_data[\"country\"],\n                \"timezone\": weather_data[\"timezone\"]\n            },\n            \"current_conditions\": {\n                \"temperature\": weather_data[\"temp\"],\n                \"feels_like\": weather_data[\"feels_like\"],\n                \"humidity\": weather_data[\"humidity\"],\n                \"wind_speed\": weather_data[\"wind_speed\"],\n                \"description\": weather_data[\"description\"]\n            },\n            \"forecast\": weather_data[\"next_24h\"],\n            \"alerts\": weather_data.get(\"alerts\", []),\n            \"last_updated\": weather_data[\"timestamp\"]\n        })\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about Core Concepts</li> <li>Explore available Response Types</li> <li>Understand the Context System</li> </ul> <p>Context is Key</p> <p>Remember that tools should provide rich, structured context data that helps the AI agent generate appropriate responses. The more relevant context you provide, the better the AI can understand the situation and respond accordingly. </p>"},{"location":"user-guide/context/","title":"Context System","text":"<p>The Context system is a fundamental part of the Weni Agents Toolkit, providing a secure and immutable way for tools to access data they need during execution.</p>"},{"location":"user-guide/context/#overview","title":"Overview","text":"<p>When a tool's <code>execute</code> method is called, it receives a Context object containing three main sections: - credentials: Secure storage for sensitive data like API keys - parameters: Tool-specific input parameters - globals: Project-wide configuration values</p>"},{"location":"user-guide/context/#using-context-in-tools","title":"Using Context in Tools","text":""},{"location":"user-guide/context/#basic-context-usage","title":"Basic Context Usage","text":"<pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\n\nclass WeatherTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Access API credentials securely\n        api_key = context.credentials.get(\"weather_api_key\", \"\")\n\n        # Get user parameters\n        city = context.parameters.get(\"city\", \"\")\n        units = context.parameters.get(\"units\", \"metric\")\n\n        # Get global configuration\n        api_url = context.globals.get(\"weather_api_url\")\n\n        # Use the data to fetch weather information\n        weather_data = self._fetch_weather(api_url, city, api_key, units)\n\n        return TextResponse(data=weather_data)\n</code></pre>"},{"location":"user-guide/context/#accessing-context-data","title":"Accessing Context Data","text":""},{"location":"user-guide/context/#safe-data-access","title":"Safe Data Access","text":"<p>Always use the <code>get()</code> method to safely access data with defaults:</p> <pre><code>class OrderTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Safe access with defaults\n        user_id = context.parameters.get(\"user_id\", \"anonymous\")\n        api_key = context.credentials.get(\"api_key\", \"\")\n        base_url = context.globals.get(\"api_url\", \"https://default-url.com\")\n</code></pre>"},{"location":"user-guide/context/#type-hints","title":"Type Hints","text":"<p>Use type hints for better code safety:</p> <pre><code>from typing import Optional, Any\n\nclass ProfileTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        user_id: str = context.parameters.get(\"user_id\", \"\")\n        settings: dict[str, Any] = context.globals.get(\"settings\", {})\n        api_key: Optional[str] = context.credentials.get(\"api_key\")\n</code></pre>"},{"location":"user-guide/responses/","title":"Responses","text":""},{"location":"user-guide/responses/#overview","title":"Overview","text":"<p>Responses in the Weni Agents Toolkit are containers for data that will be used by the AI agent to generate appropriate text responses. Each response type is designed to provide context for different kinds of interactions and features a specific set of components (like text, buttons, attachments) that determine how the content will be displayed.</p>"},{"location":"user-guide/responses/#header-types","title":"Header Types","text":"<p>For some responses that support headers, you can specify the type of header using the <code>HeaderType</code> enum:</p> <pre><code>from weni.responses import HeaderType\n\n# Available header types\nHeaderType.TEXT        # Text-based header\nHeaderType.ATTACHMENTS # Attachment-based header (images, files, etc.)\nHeaderType.NONE        # No header (default)\n</code></pre>"},{"location":"user-guide/responses/#response-types","title":"Response Types","text":""},{"location":"user-guide/responses/#text-response","title":"Text Response","text":"<p>Simple text response with a single text component:</p> <pre><code>from weni.responses import TextResponse\n\nresponse = TextResponse(\n    data={\n        \"weather\": \"sunny\",\n        \"temperature\": \"25\u00b0C\",\n        \"location\": \"New York\"\n    }\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response</p>"},{"location":"user-guide/responses/#attachment-response","title":"Attachment Response","text":"<p>Response with media attachments such as images, documents, or videos:</p> <pre><code>from weni.responses import AttachmentResponse\n\nresponse = AttachmentResponse(\n    data={\n        \"attachments\": [{\n            \"type\": \"image\",\n            \"url\": \"https://example.com/image.jpg\"\n        }],\n    },\n    text=True,   # Include a text component\n    footer=True  # Include a footer component\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response - <code>text</code> (bool): Whether to include a text component (default: False) - <code>footer</code> (bool): Whether to include a footer component (default: False)</p>"},{"location":"user-guide/responses/#quick-reply-response","title":"Quick Reply Response","text":"<p>Interactive response with quick reply buttons:</p> <pre><code>from weni.responses import QuickReplyResponse, HeaderType\n\nresponse = QuickReplyResponse(\n    data={\n        \"user_preference\": \"vegetarian\",\n        \"available_restaurants\": [\n            \"Green Garden\",\n            \"Veggie House\",\n            \"Fresh Bites\"\n        ]\n    },\n    header_type=HeaderType.TEXT, # Include a text header component\n    footer=True # Include a footer component\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response - <code>header_type</code> (HeaderType): Type of header to display (default: HeaderType.NONE) - <code>footer</code> (bool): Whether to include a footer (default: False)</p>"},{"location":"user-guide/responses/#list-message-response","title":"List Message Response","text":"<p>Response with a structured list of items:</p> <pre><code>from weni.responses import ListMessageResponse, HeaderType\n\nresponse = ListMessageResponse(\n    data={\n        \"product_category\": \"smartphones\",\n        \"price_range\": \"500-1000\"\n    },\n    header_type=HeaderType.ATTACHMENTS, # Include an attachment header component\n    footer=True # Include a footer component\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response - <code>header_type</code> (HeaderType): Type of header to display (default: HeaderType.NONE) - <code>footer</code> (bool): Whether to include a footer (default: False)</p>"},{"location":"user-guide/responses/#cta-message-response","title":"CTA Message Response","text":"<p>Response with call-to-action buttons:</p> <pre><code>from weni.responses import CTAMessageResponse\n\nresponse = CTAMessageResponse(\n    data={\n        \"text\": \"Would you like to proceed with your order?\",\n        \"buttons\": [\n            {\"title\": \"Yes, confirm\", \"payload\": \"confirm_order\"},\n            {\"title\": \"No, cancel\", \"payload\": \"cancel_order\"}\n        ],\n        \"header\": {\"type\": \"text\", \"content\": \"Order Confirmation\"},\n        \"footer\": {\"text\": \"Your order total is $45.99\"}\n    },\n    header=True, # Include a header component\n    footer=True # Include a footer component\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response - <code>header</code> (bool): Whether to include a header component (default: False) - <code>footer</code> (bool): Whether to include a footer component (default: False)</p>"},{"location":"user-guide/responses/#order-details-response","title":"Order Details Response","text":"<p>Response with structured order information:</p> <pre><code>from weni.responses import OrderDetailsResponse\n\nresponse = OrderDetailsResponse(\n    data={\n        \"order_id\": \"ORD-12345\",\n        \"items\": [\n            {\"name\": \"Product A\", \"quantity\": 2, \"price\": 19.99},\n            {\"name\": \"Product B\", \"quantity\": 1, \"price\": 9.99}\n        ],\n        \"total\": 49.97,\n        \"status\": \"Processing\",\n        \"customer_info\": {\n            \"name\": \"John Doe\",\n            \"address\": \"123 Main St, City\"\n        }\n    },\n    attachments=True, # Include an attachment component\n    footer=True # Include a footer component\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response - <code>attachments</code> (bool): Whether to include attachments (default: False) - <code>footer</code> (bool): Whether to include a footer (default: False)</p>"},{"location":"user-guide/responses/#location-response","title":"Location Response","text":"<p>Response requesting location information:</p> <pre><code>from weni.responses import LocationResponse\n\nresponse = LocationResponse(\n    data={\n        \"location_request\": {\n            \"required\": True,\n        }\n    }\n)\n</code></pre> <p>Parameters: - <code>data</code>: Dictionary containing context information for the agent to generate a response</p>"},{"location":"user-guide/responses/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/responses/#1-provide-rich-context","title":"1. Provide Rich Context","text":"<p>Include relevant information that helps the AI generate better responses:</p> <pre><code>response = TextResponse(\n    data={\n        \"user_name\": \"John\",\n        \"user_history\": [\"previous_purchases\", \"browsing_preferences\"],\n        \"current_intent\": \"product_recommendation\",\n        \"product_category\": \"electronics\"\n    }\n)\n</code></pre>"},{"location":"user-guide/responses/#2-type-safety","title":"2. Type Safety","text":"<p>Use type hints to improve code quality and IDE support:</p> <pre><code>from typing import Any\nfrom weni.responses import TextResponse\n\ndef create_response(context_data: dict[str, Any]) -&gt; TextResponse:\n    return TextResponse(data=context_data)\n</code></pre>"},{"location":"user-guide/responses/#3-structured-data-organization","title":"3. Structured Data Organization","text":"<p>Keep data structured and organized for better AI comprehension:</p> <pre><code>response = TextResponse(\n    data={\n        \"user\": {\n            \"name\": \"Alice\",\n            \"preferences\": [\"books\", \"music\"],\n            \"language\": \"en\"\n        },\n        \"query\": {\n            \"type\": \"recommendation\",\n            \"category\": \"books\",\n            \"filters\": {\n                \"genre\": \"science fiction\",\n                \"max_price\": 20\n            }\n        }\n    }\n)\n</code></pre>"},{"location":"user-guide/responses/#4-component-configuration","title":"4. Component Configuration","text":"<p>Configure components based on the requirements of your interaction:</p> <pre><code># For a rich interactive experience\nresponse = QuickReplyResponse(\n    data={...},\n    header_type=HeaderType.ATTACHMENTS,  # Include an image header\n    footer=True                          # Include a footer\n)\n\n# For a simpler experience\nresponse = QuickReplyResponse(\n    data={...},\n    header_type=HeaderType.NONE,         # No header\n    footer=False                         # No footer\n)\n</code></pre>"},{"location":"user-guide/responses/#important-notes","title":"Important Notes","text":"<p>Note</p> <p>The <code>data</code> attribute is the only required field for responses. This data serves as context for the AI agent to generate appropriate text responses.</p> <p>Tip</p> <p>Provide as much relevant context as possible in the <code>data</code> attribute to help the AI generate more accurate and contextual responses.</p> <p>Warning</p> <p>The response object itself doesn't contain the final text - it provides the context for the AI to generate the text.</p>"},{"location":"user-guide/tools/","title":"Tools","text":""},{"location":"user-guide/tools/#overview","title":"Overview","text":"<p>Tools are the core executable units in the Weni Agents Toolkit. They encapsulate specific functionality and can be combined to create complex conversational flows.</p>"},{"location":"user-guide/tools/#creating-a-tool","title":"Creating a Tool","text":"<pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nfrom typing import Optional\n\nclass CustomTool(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Implementation here\n        pass\n</code></pre>"},{"location":"user-guide/tools/#tool-lifecycle","title":"Tool Lifecycle","text":"<ol> <li>Initialization: Tool instance is created</li> <li>Context Reception: Tool receives execution context</li> <li>Execution: Business logic is processed</li> <li>Response Generation: Tool generates appropriate response</li> </ol>"},{"location":"user-guide/tools/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/tools/#1-type-safety","title":"1. Type Safety","text":"<p>Always use type hints:</p> <pre><code>from typing import Any\n\nclass WeatherTool(Tool):\n    def execute(self, context: Context) -&gt; Response:\n        location: str = context.parameters.get(\"location\", \"\")\n        return TextResponse(data=self._get_weather(location))\n\n    def _get_weather(self, location: str) -&gt; dict[str, Any]:\n        # Implementation\n        pass\n</code></pre>"},{"location":"user-guide/tools/#2-error-handling","title":"2. Error Handling","text":"<p>Always return a response, even if it's an error response, this will allow the AI to continue the conversation:</p> <pre><code>from weni.exceptions import ToolError\n\nclass APITool(Tool):\n    def execute(self, context: Context) -&gt; Response:\n        try:\n            # API call\n            pass\n        except Exception as e:\n            return TextResponse(data={\"error\": \"API call failed\"})\n</code></pre>"}]}